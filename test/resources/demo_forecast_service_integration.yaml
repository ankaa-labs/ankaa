Comment: An automation Pipeline for Amazon Forecast.
StartAt: Create-Dataset
States:
  Create-Dataset:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:createDataset'
    Parameters:
      DatasetName.$: 'States.Format(''{}_target'', $.ProjectName)'
      DatasetType: TARGET_TIME_SERIES
      DataFrequency: H
      Domain: CUSTOM
      Schema:
        Attributes:
          - AttributeName: timestamp
            AttributeType: timestamp
          - AttributeName: target_value
            AttributeType: float
          - AttributeName: item_id
            AttributeType: string
    ResultPath: $.createDatasetResult
    Next: Import-Data
  Import-Data:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:createDatasetImportJob'
    Parameters:
      DatasetImportJobName.$: 'States.Format(''{}_import'', $.ProjectName)'
      DatasetArn.$: $.createDatasetResult.DatasetArn
      DataSource:
        S3Config:
          Path: 's3://${S3DataBucket}/${S3DataBucketInputKey}'
          RoleArn: '${ForecastRole}'
      TimestampFormat: 'yyyy-MM-dd hh:mm:ss'
    ResultPath: $.createDatasetImportJobResult
    Next: Create-DatasetGroup
  Create-DatasetGroup:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:createDatasetGroup'
    Parameters:
      DatasetGroupName.$: 'States.Format(''{}'', $.ProjectName)'
      DatasetArns.$: States.Array($.createDatasetResult.DatasetArn)
      Domain: CUSTOM
    ResultPath: $.createDatasetGroupResult
    Next: Check-Data-Import
  Check-Data-Import:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:describeDatasetImportJob'
    Parameters:
      DatasetImportJobArn.$: $.createDatasetImportJobResult.DatasetImportJobArn
    ResultPath: $.describeDatasetImportJobResult
    Next: Fork-Data-Import
  Fork-Data-Import:
    Type: Choice
    Choices:
      - Variable: $.describeDatasetImportJobResult.Status
        StringEquals: ACTIVE
        Next: Done-Data-Import
    Default: Wait-Data-Import
  Wait-Data-Import:
    Type: Wait
    Seconds: 60
    Next: Check-Data-Import
  Done-Data-Import:
    Type: Pass
    Next: Create-Predictor
  Create-Predictor:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:createPredictor'
    Parameters:
      PredictorName.$: 'States.Format(''{}_predictor'', $.ProjectName)'
      InputDataConfig:
        DatasetGroupArn.$: $.createDatasetGroupResult.DatasetGroupArn
      AlgorithmArn: 'arn:aws:forecast:::algorithm/NPTS'
      ForecastHorizon: 24
      PerformAutoML: false
      PerformHPO: false
      EvaluationParameters:
        NumberOfBacktestWindows: 1
        BackTestWindowOffset: 24
      FeaturizationConfig:
        ForecastFrequency: H
        Featurizations:
          - AttributeName: target_value
            FeaturizationPipeline:
              - FeaturizationMethodName: filling
                FeaturizationMethodParameters:
                  frontfill: none
                  middlefill: zero
                  backfill: zero
    ResultPath: $.createPredictorResult
    Next: Backtest-Export
  Backtest-Export:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:createPredictorBacktestExportJob'
    Parameters:
      PredictorBacktestExportJobName.$: 'States.Format(''{}_backtestexport'', $.ProjectName)'
      PredictorArn.$: $.createPredictorResult.PredictorArn
      Destination:
        S3Config:
          Path: 's3://${S3DataBucket}/forecast_results/backtestexport/'
          RoleArn: '${ForecastRole}'
    ResultPath: $.createPredictorBacktestExportJobResult
    Retry:
      - ErrorEquals:
          - Forecast.ResourceInUseException
        IntervalSeconds: 180
        BackoffRate: 1
        MaxAttempts: 100
    Next: Create-Forecast
  Create-Forecast:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:createForecast'
    Parameters:
      ForecastName.$: 'States.Format(''{}_forecast'', $.ProjectName)'
      PredictorArn.$: $.createPredictorResult.PredictorArn
    ResultPath: $.createForecastResult
    Retry:
      - ErrorEquals:
          - Forecast.ResourceInUseException
        IntervalSeconds: 180
        BackoffRate: 1
        MaxAttempts: 100
    Next: Forecast-Export
  Forecast-Export:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:createForecastExportJob'
    Parameters:
      ForecastExportJobName.$: 'States.Format(''{}_forecastexport'', $.ProjectName)'
      ForecastArn.$: $.createForecastResult.ForecastArn
      Destination:
        S3Config:
          Path: 's3://${S3DataBucket}/forecast_results/forecast/'
          RoleArn: '${ForecastRole}'
    ResultPath: $.createForecastExportJobResult
    Retry:
      - ErrorEquals:
          - Forecast.ResourceInUseException
        IntervalSeconds: 180
        BackoffRate: 1
        MaxAttempts: 100
    Next: Clean-Up
  Clean-Up:
    Type: Pass
    Next: Delete-Forecast-Export
  Delete-Forecast-Export:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:deleteForecastExportJob'
    Parameters:
      ForecastExportJobArn.$: $.createForecastExportJobResult.ForecastExportJobArn
    ResultPath: $.deleteForecastExportJobResult
    Retry:
      - ErrorEquals:
          - Forecast.ResourceInUseException
        IntervalSeconds: 10
        BackoffRate: 1.1
        MaxAttempts: 100
    Next: Delete-Forecast
  Delete-Forecast:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:deleteForecast'
    Parameters:
      ForecastArn.$: $.createForecastResult.ForecastArn
    ResultPath: $.deleteForecastResult
    Retry:
      - ErrorEquals:
          - Forecast.ResourceInUseException
        IntervalSeconds: 10
        BackoffRate: 1.1
        MaxAttempts: 100
    Next: Delete-Backtest
  Delete-Backtest:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:deletePredictorBacktestExportJob'
    Parameters:
      PredictorBacktestExportJobArn.$: $.createPredictorBacktestExportJobResult.PredictorBacktestExportJobArn
    ResultPath: $.deletePredictorBacktestExportJobResult
    Retry:
      - ErrorEquals:
          - Forecast.ResourceInUseException
        IntervalSeconds: 10
        BackoffRate: 1.1
        MaxAttempts: 100
    Next: Delete-Predictor
  Delete-Predictor:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:deletePredictor'
    Parameters:
      PredictorArn.$: $.createPredictorResult.PredictorArn
    ResultPath: $.deletePredictorResult
    Retry:
      - ErrorEquals:
          - Forecast.ResourceInUseException
        IntervalSeconds: 10
        BackoffRate: 1.1
        MaxAttempts: 100
    Next: Delete-Import
  Delete-Import:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:deleteDatasetImportJob'
    Parameters:
      DatasetImportJobArn.$: $.createDatasetImportJobResult.DatasetImportJobArn
    ResultPath: $.deleteDatasetImportJobResult
    Retry:
      - ErrorEquals:
          - Forecast.ResourceInUseException
        IntervalSeconds: 10
        BackoffRate: 1.1
        MaxAttempts: 100
    Next: Delete-Dataset
  Delete-Dataset:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:deleteDataset'
    Parameters:
      DatasetArn.$: $.createDatasetResult.DatasetArn
    ResultPath: $.deleteDatasetResult
    Retry:
      - ErrorEquals:
          - Forecast.ResourceInUseException
        IntervalSeconds: 10
        BackoffRate: 1.1
        MaxAttempts: 100
    Next: Delete-DatasetGroup
  Delete-DatasetGroup:
    Type: Task
    Resource: 'arn:aws:states:::aws-sdk:forecast:deleteDatasetGroup'
    Parameters:
      DatasetGroupArn.$: $.createDatasetGroupResult.DatasetGroupArn
    ResultPath: $.deleteDatasetGroupResult
    Retry:
      - ErrorEquals:
          - Forecast.ResourceInUseException
        IntervalSeconds: 10
        BackoffRate: 1.1
        MaxAttempts: 100
    Next: SuccessState
  SuccessState:
    Type: Succeed
